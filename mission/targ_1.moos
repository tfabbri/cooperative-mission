ServerHost = localhost
ServerPort = 9001
Simulator  = true

Community  = 1

MOOSTimeWarp = 1
//LatOrigin  = 43.825300 
//LongOrigin = -70.330400 
//LatOrigin  = 42.3584
//LongOrigin = -71.08745
LatOrigin = 44.044956
LongOrigin = 9.859495

  
//------------------------------------------------------------
Processconfig = ANTLER
{
  MSBetweenLaunches = 100
   
  Run = MOOSDB             @ NewConsole = false
  Run = uSimMarine         @ NewConsole = false
  Run = pLogger            @ NewConsole = false
  Run = pNodeReporter      @ NewConsole = false
  Run = pMarinePID         @ NewConsole = false
//  Run = pHelmIvP           @ NewConsole = false
  Run = uProcessWatch      @ NewConsole = false
  Run = uSimCurrent        @ NewConsole = false

  Run = pShare             @ NewConsole = false
  Run = pHostInfo          @ NewConsole = false
  Run = uFldNodeBroker     @ NewConsole = false
  Run = uFldMessageHandler @ NewConsole = false
//  Run = uFldHazardMgr      @ NewConsole = false
//  Run = pAcommsHandler     @ NewConsole = true
//  Run = pTranslator     @ NewConsole = true
}
  
//--------------------------------------------------
// uFldNodeBroker configuration block from plugin

ProcessConfig = uFldNodeBroker
{
  AppTick   = 1
  CommsTick = 1

  try_shore_host = pshare_route=multicast_9

  bridge = src=VIEW_POLYGON
  bridge = src=VIEW_POINT
  bridge = src=VIEW_SEGLIST
  bridge = src=APPCAST
//  bridge = src=UHZ_CLASSIFY_REQUEST
//  bridge = src=UHZ_SENSOR_REQUEST
//  bridge = src=UHZ_CONFIG_REQUEST
//  bridge = src=HAZARDSET_REPORT
  bridge = src=NODE_REPORT_LOCAL,  alias=NODE_REPORT
  bridge = src=NODE_MESSAGE_LOCAL, alias=NODE_MESSAGE
}

//---------------------------------------------------------
// pShare Config Block  (Created from Plugin)

ProcessConfig = pShare
{
  AppTick    = 2
  CommsTick  = 2

  input = route =  localhost:9301

  // =======================================================
  // Usage Info below
  // =======================================================

  // Simple forward of X to A on channel 8
  // output = src_name = X,dest_name=A, route=multicast_8
 
  // Simple forward of Y to B on a udp address

  // output = src_name=Y, dest_name=B, route=localhost:9300
 
  // Simple forward of Z to Z on a named address (no renaming)
  // output = src_name = Z, route = oceanai.mit.edu:9020
 
  // Setting up an input
  // input = route = multicast_9
  
  // input = route = localhost:9301 & multicast_9

 
  // Setting up lots of inputs at once
  // input = route = "localhost:9069 & multicast_19 & multicast_65"
}


//--------------------------------------------------
// pHostInfo configuration block from plugin

ProcessConfig = pHostInfo
{
  AppTick 	= 1
  CommsTick 	= 1

  default_hostip = localhost
}


//--------------------------------------------------
// uFldMessageHandler configuration block from plugin

ProcessConfig = uFldMessageHandler
{
  AppTick   = 3
  CommsTick = 3

  STRICT_ADDRESSING = false
}


//------------------------------------------------------
// uSimMarine Configuration Block  (Created from plugin)

ProcessConfig = uSimMarine
{
  AppTick   = 10
  CommsTick = 10

  START_POS = 5,0, 0, 0
  PREFIX    = NAV

  BUOYANCY_RATE    = 0.025
  MAX_DEPTH_RATE = 0.5
  MAX_DEPTH_RATE_SPEED = 2.0
}



//-----------------------------------------------------
// pMarinePID Configuration Block (created from plugin)

ProcessConfig = pMarinePID
{
  AppTick    = 10
  CommsTick  = 10
  
  verbose       = true
  depth_control = false
  active_start  = true
  
  // Yaw PID controller
  yaw_pid_kp             = 0.4
  yaw_pid_kd             = 0.1
  yaw_pid_ki             = 0.0
  yaw_pid_integral_limit = 0.07
  
  // Speed PID controller
  speed_pid_kp           = 1.0
  speed_pid_kd           = 0.0
  speed_pid_ki           = 0.0
  speed_pid_integral_limit = 0.07
  
  //Pitch PID controller
  pitch_pid_kp                   = 0.5
  pitch_pid_kd                   = 1.0
  pitch_pid_ki                   = 0
  pitch_pid_integral_limit       = 0

  //ZPID controller
  z_to_pitch_pid_kp              = 0.12
  z_to_pitch_pid_kd              = 0
  z_to_pitch_pid_ki              = 0.004
  z_to_pitch_pid_integral_limit  = 0.05

  maxpitch     = 15
  maxelevator  = 13

  // Maximums
  maxrudder  = 100
  maxthrust  = 100
  
  // A non-zero SPEED_FACTOR overrides use of SPEED_PID
  // Will set DESIRED_THRUST = DESIRED_SPEED * SPEED_FACTOR
  speed_factor = 20
}

//--------------------------------------------------
// pLogger Configuration Block (Created from Plugin)

ProcessConfig = pLogger
{
  AppTick 	= 5
  CommsTick 	= 5
  
  File		= LOG_1
  PATH		= ./
  SyncLog 	= true @ 0.2
  AsyncLog 	= true
  FileTimeStamp = true

  Log = IVPHELM_LIFE_EVENT @ 0 nosync

  // Log it all!!!!!
  WildCardLogging = true 
  WildCardOmitPattern = *_STATUS
  WildCardOmitPattern = DB_VARSUMMARY
  WildCardOmitPattern = DB_RWSUMMARY
  LogAuxSrc = true
}

//--------------------------------------------------------
// pNodeReporter Configuration Block (Created from Plugin)

ProcessConfig = pNodeReporter
{
  AppTick     = 2
  CommsTick   = 2
  
  VESSEL_TYPE = UUV
}

//--------------------------------------------------------
// uProcessWatch Configuration Block (Created from Plugin)

ProcessConfig = uProcessWatch
{
  AppTick   = 2
  CommsTick = 2
  
  NOWATCH = uXMS*

  WATCH_ALL = true

  WATCH  = uSimMarine
  WATCH  = pShare*
  WATCH  = pLogger
  WATCH  = pNodeReporter
  WATCH  = pMarinePID
//  WATCH  = pHelmIvP
}

ProcessConfig = pAcommsHandler
{
  common {   
    log: true  
    log_path: "./"   
    log_verbosity: DEBUG1  
    app_tick: 10   
    comm_tick: 10  
    verbosity: VERBOSE 
    show_gui: false  
    use_binary_protobuf: false 
    moos_parser_technique: TECHNIQUE_PREFIXED_PROTOBUF_TEXT_FORMAT  
    initializer {   
      type: INI_DOUBLE #(INI_DOUBLE, INI_STRING)
      moos_var: "SOME_MOOS_VAR"   
      global_cfg_var: "LatOrigin"  
      dval: 3.454  # Value to write for type==INI_DOUBLE 
      sval: "a string"  # Value to write for type==INI_STRING 
      trim: true  # Trim whitespace from front and back of string 
    }
  }
  modem_id: 1  
  driver_type: DRIVER_UFIELD_SIM_DRIVER  
  driver_cfg {   
    modem_id: 1
    [goby.moos.protobuf.Config.moos_server]: "localhost"  
    [goby.moos.protobuf.Config.moos_port]: 9001  
    [goby.moos.protobuf.Config.incoming_moos_var]: "ACOMMS_UFIELD_DRIVER_IN"  
    [goby.moos.protobuf.Config.outgoing_moos_var]: "ACOMMS_UFIELD_DRIVER_OUT"  
    [goby.moos.protobuf.Config.ufield_outgoing_moos_var]: "NODE_MESSAGE_LOCAL"  
    [goby.moos.protobuf.Config.rate_to_bytes]:   32
    [goby.moos.protobuf.Config.rate_to_bytes]:   192
    [goby.moos.protobuf.Config.rate_to_bytes]:   192
    [goby.moos.protobuf.Config.rate_to_bytes]:   512
    [goby.moos.protobuf.Config.rate_to_bytes]:   512
    [goby.moos.protobuf.Config.rate_to_bytes]:   2048
    [goby.moos.protobuf.Config.modem_id_lookup_path]: "/home/tom/Git/cooperative-mission/mission/lookup.moos"  
    [goby.moos.protobuf.Config.micromodem_mimic] {  
      range_request_var: "CRS_RANGE_REQUEST"   
      range_report_var: "CRS_RANGE_REPORT"   
    }
  }  
  driver_failure_approach {  # How to try to deal with a failed 
                             # driver (optional)
    technique: CONTINUALLY_RESTART_DRIVER  #  
    driver_backoff_sec: 60  # Seconds to wait until restarting a 
  }
  mac_cfg {  # Configure the acoustic Medium Access Control 
    modem_id: 1 
    type: MAC_FIXED_DECENTRALIZED 
    start_cycle_in_middle: true 
    ref_time_type: REFERENCE_START_OF_DAY   
    slot { 
           src: 1 
           type: DATA  
           slot_seconds:10
    }
    slot { 
           src: 2 
           type: DATA  
           slot_seconds:10
    }
  }
  queue_cfg {
    message_entry {
      protobuf_name : "goby.acomms.protobuf.ModemTransmission"
      ack : false
      blackout_time : 0
      max_queue : 100
      newest_first : true
      ttl : 1800
      value_base : 1
    }
  }
  translator_entry {
    protobuf_name : "goby.acomms.protobuf.ModemTransmission"
    trigger {
        type : TRIGGER_PUBLISH
        moos_var : "TRIGGER_IN"
    }
    create {
        technique : TECHNIQUE_COMMA_SEPARATED_KEY_EQUALS_VALUE_PAIRS
        moos_var  : "MESSAGE_IN"
    }
    publish {
        technique : TECHNIQUE_PROTOBUF_NATIVE_ENCODED
        //technique : TECHNIQUE_PREFIXED_PROTOBUF_TEXT_FORMAT
        moos_var  : "ACOMMS_UFIELD_DRIVER_IN"
    }
  }
  //load_shared_library : "/home/tom/Git/cooperative-mission/mission/libmodem_message.so"
  load_proto_file : "/home/tom/Git/goby/include/goby/acomms/protobuf/modem_message.proto"
  load_shared_library : "/home/tom/Git/goby/lib/libgoby_moos.so"
  load_shared_library : "/home/tom/Git/goby/lib/libgoby_util.so"
}

ProcessConfig = pTranslator 
{
  common {
    log: true  
    log_path: "./"   
    log_verbosity: DEBUG1  
    app_tick: 10   
    comm_tick: 10  
    verbosity: VERBOSE
  }

  //load_proto_file : "/home/tom/Git/goby/include/goby/acomms/protobuf/modem_message.proto"
  load_shared_library : "/home/tom/Git/goby/lib/libgoby_moos.so"
  load_shared_library : "/home/tom/Git/goby/lib/libgoby_pb.so"


  translator_entry {
    protobuf_name : "goby.acomms.protobuf.ModemTransmission"
    trigger {
        type : TRIGGER_PUBLISH
        moos_var : "TRIGGER_IN"
    }
    create {
        technique : TECHNIQUE_COMMA_SEPARATED_KEY_EQUALS_VALUE_PAIRS
        moos_var  : "MESSAGE_IN"
    }
    publish {
        //technique : TECHNIQUE_PROTOBUF_NATIVE_ENCODED
        technique : TECHNIQUE_PREFIXED_PROTOBUF_TEXT_FORMAT
        moos_var  : "ACOMMS_UFIELD_DRIVER_IN"
    }
  }
}

//-------------------------------
// uSimCurrent config block

Processconfig = uSimCurrent
{
  AppTick       = 10
  CommsTick     = 10 
  current_field = current_field.cfd
}

