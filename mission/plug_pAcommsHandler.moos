ProcessConfig = pAcommsHandler
{
  common {   
    log: true  
    log_path: "./log"   
    log_verbosity: DEBUG3  
    app_tick: 10   
    comm_tick: 10  
    verbosity: DEBUG3 
    show_gui: true  
    use_binary_protobuf: false 
    moos_parser_technique: TECHNIQUE_PREFIXED_PROTOBUF_TEXT_FORMAT  
    initializer {   
      type: INI_DOUBLE #(INI_DOUBLE, INI_STRING)
      moos_var: "SOME_MOOS_VAR"   
      global_cfg_var: "LatOrigin"  
      dval: 3.454  # Value to write for type==INI_DOUBLE 
      sval: "a string"  # Value to write for type==INI_STRING 
      trim: true  # Trim whitespace from front and back of string 
    }
  }
  modem_id: $(MODEM_ID)  
  driver_type: DRIVER_UFIELD_SIM_DRIVER  
  driver_cfg {   
    modem_id: $(MODEM_ID)
    [goby.moos.protobuf.Config.moos_server]: "localhost"  
    [goby.moos.protobuf.Config.moos_port]: $(VPORT)  
    [goby.moos.protobuf.Config.incoming_moos_var]: "ACOMMS_UFIELD_DRIVER_IN"  
    [goby.moos.protobuf.Config.outgoing_moos_var]: "ACOMMS_UFIELD_DRIVER_OUT"  
    [goby.moos.protobuf.Config.ufield_outgoing_moos_var]: "NODE_MESSAGE_LOCAL"  
    [goby.moos.protobuf.Config.rate_to_bytes]:   32
    [goby.moos.protobuf.Config.rate_to_bytes]:   192
    [goby.moos.protobuf.Config.rate_to_bytes]:   192
    [goby.moos.protobuf.Config.rate_to_bytes]:   512
    [goby.moos.protobuf.Config.rate_to_bytes]:   512
    [goby.moos.protobuf.Config.rate_to_bytes]:   2048
    [goby.moos.protobuf.Config.modem_id_lookup_path]: "/home/tom/Git/cooperative-mission/mission/lookup.moos"  
    [goby.moos.protobuf.Config.micromodem_mimic] {  
      range_request_var: "CRS_RANGE_REQUEST"   
      range_report_var: "CRS_RANGE_REPORT"   
    }
  }  
  driver_failure_approach {  # How to try to deal with a failed 
                             # driver (optional)
    technique: CONTINUALLY_RESTART_DRIVER  #  
    driver_backoff_sec: 60  # Seconds to wait until restarting a 
  }
  mac_cfg {  # Configure the acoustic Medium Access Control 
    modem_id: $(MODEM_ID) 
    type: MAC_FIXED_DECENTRALIZED 
    start_cycle_in_middle: true 
    ref_time_type: REFERENCE_START_OF_DAY   
    slot { 
           src: 1 
           type: DATA  
           slot_seconds: 5
    }
    slot { 
           src: 2 
           type: DATA  
           slot_seconds: 5
    }
    slot { 
           src: 3 
           type: DATA  
           slot_seconds: 5
    }
    slot {
        type: DRIVER_SPECIFIC
        [micromodem.protobuf.type]: MICROMODEM_TWO_WAY_PING
        src: 2 dest: 3
        slot_seconds: 1
    }
  }

  queue_cfg {
    message_entry {
      protobuf_name : "NavigationReport"
      ack : true
      blackout_time : 0
      max_queue : 5
      newest_first : true
      ttl : 1800
      value_base : 1
      role : { type: SOURCE_ID field: "source_addr"}
      role : { type: DESTINATION_ID field: "dest_addr"}
      role : { type: TIMESTAMP field: "time"}
    }
    message_entry {
      protobuf_name : "SamplingPointReport"
      ack : true
      blackout_time : 0
      max_queue : 10
      newest_first : true
      ttl : 1800
      value_base : 1
      role : { type: SOURCE_ID field: "source_addr"}
      role : { type: DESTINATION_ID field: "dest_addr"}
      role : { type: TIMESTAMP field: "time"}
    }
  }

  translator_entry {
    protobuf_name : "NavigationReport"
    trigger {
        type : TRIGGER_PUBLISH
        moos_var : "TEMP_MESSAGE_IN"
    }
    create {
        technique : TECHNIQUE_COMMA_SEPARATED_KEY_EQUALS_VALUE_PAIRS
        moos_var  : "TEMP_MESSAGE_IN"
    }
    publish {
        technique : TECHNIQUE_PROTOBUF_TEXT_FORMAT
        moos_var  : "ACOMMS_UFIELD_DRIVER_IN"
    }
  }
  load_proto_file : "/home/tom/Git/cooperative-mission/mission/NavigationReport.proto"
  load_proto_file : "/home/tom/Git/cooperative-mission/mission/SamplingPointReport.proto"
}

ProcessConfig = pTranslator 
{
  common {
    log: true  
    log_path: "./"   
    log_verbosity: DEBUG1  
    app_tick: 10   
    comm_tick: 10  
    verbosity: VERBOSE
  }
  load_proto_file : "./simple_message.proto"
  translator_entry {
    protobuf_name : "SimpleMessage"
    trigger {
	type : TRIGGER_PUBLISH
        moos_var : "TEMP_MESSAGE_IN"
    }
    create {
	technique : TECHNIQUE_COMMA_SEPARATED_KEY_EQUALS_VALUE_PAIRS
	moos_var  : "PROVA"
    }
    publish {
	technique : TECHNIQUE_PREFIXED_PROTOBUF_TEXT_FORMAT
        moos_var  : "ACOMMS_UFIELD_DRIVER_IN"
    }
  }
}
